#!/usr/bin/env python

"""
@file ion/data/dataobject.py
@author Michael Meisinger
@author David Stuebe
@brief storing structured mutable objects mapped to graphs of immutable values
"""

import logging
import hashlib
import json
import types

from twisted.internet import defer

class ValueRef(object):
    """Refers to a unique immutable value but 
    """
    def __init__(self, identity):
        # Save
        self.identity = identity
        
class ValueObject(ValueRef):
    """An instance of ValueObject represents an immutable value with an
    identifier, which is generated by secure hashing the value
    """
    def __init__(self, value, childrefs=()):
        """Initializes an immutable value, which consists of an actual value
        structure and 0 or more refs to child values
        
        @param value the actual value content (must exist and JSON'able)
        @param childrefs None or tuple of identities of child values
        """
        
        assert value != None
        assert childrefs != None and type(childrefs) is tuple
        
        # Convert child ref into a string (hopefully with identity hash)
        def _reftostr(ref):
            if ref is str: return str
            elif isinstance(ref,ValueRef): return ref.identity
            else: return str(str)
            
        # Save childrefs (immutable tuple of str)
        self.childrefs = (_reftostr(child) for child in childrefs)
        
        # Encode the value (this might fail), and save blob
        self.blob = json.dumps(value)
        
        # Save value (for efficiency purposes)
        self.value = value

        # Encode tuple of childrefs and save blob
        self.crblob = json.dumps(self.childrefs)
                
        # Create a secure unique hash of value and child references
        hashval = self.blob + self.crblob
        hash = hashlib.sha1(hashval).hexdigest()
        
        # Init the underlying valueref; use hash as identity
        ValueRef.__init__(self, hash)

class EntityObject(object):
    """An instance of EntityObject "entity" represebts a mutable object
    with a given identity. The actual state of the entity exists as reference
    to an immutable value. Entity keeps track of the succession of states over
    time.
    """
    def __init__(self):
        self.kvs = {}
        self.identity = None
        
    def setState(self, state):
        pass
    
    def getState(self):
        pass
        
class ObjectStore(object):
    """Main class to 
    """
    
    backend = None
    
    def __init__(self):
        self.kvs = {}
        
    def store_value(self,valueobj):
        key = valueobj.key
        return
    
    def get_value(self):
        pass
    
    def store_object(self):
        pass
    
    def get_object(self):
        pass